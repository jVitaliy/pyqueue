# Generated from interpreter/Desc.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,24,211,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,
        9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,
        20,1,21,1,21,1,22,4,22,195,8,22,11,22,12,22,196,1,22,1,22,1,23,1,
        23,1,23,1,23,5,23,205,8,23,10,23,12,23,208,9,23,1,23,1,23,0,0,24,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        1,0,4,1,0,48,57,2,0,65,90,97,122,3,0,9,10,13,13,32,32,2,0,10,10,
        13,13,212,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,1,49,1,
        0,0,0,3,51,1,0,0,0,5,53,1,0,0,0,7,55,1,0,0,0,9,57,1,0,0,0,11,66,
        1,0,0,0,13,68,1,0,0,0,15,77,1,0,0,0,17,83,1,0,0,0,19,85,1,0,0,0,
        21,87,1,0,0,0,23,89,1,0,0,0,25,109,1,0,0,0,27,128,1,0,0,0,29,130,
        1,0,0,0,31,132,1,0,0,0,33,139,1,0,0,0,35,148,1,0,0,0,37,157,1,0,
        0,0,39,176,1,0,0,0,41,189,1,0,0,0,43,191,1,0,0,0,45,194,1,0,0,0,
        47,200,1,0,0,0,49,50,5,59,0,0,50,2,1,0,0,0,51,52,5,40,0,0,52,4,1,
        0,0,0,53,54,5,44,0,0,54,6,1,0,0,0,55,56,5,41,0,0,56,8,1,0,0,0,57,
        58,5,101,0,0,58,59,5,120,0,0,59,60,5,99,0,0,60,61,5,108,0,0,61,62,
        5,117,0,0,62,63,5,100,0,0,63,64,5,101,0,0,64,65,5,61,0,0,65,10,1,
        0,0,0,66,67,5,124,0,0,67,12,1,0,0,0,68,69,5,112,0,0,69,70,5,97,0,
        0,70,71,5,116,0,0,71,72,5,116,0,0,72,73,5,101,0,0,73,74,5,114,0,
        0,74,75,5,110,0,0,75,76,5,61,0,0,76,14,1,0,0,0,77,78,5,102,0,0,78,
        79,5,114,0,0,79,80,5,111,0,0,80,81,5,109,0,0,81,82,5,61,0,0,82,16,
        1,0,0,0,83,84,5,46,0,0,84,18,1,0,0,0,85,86,5,47,0,0,86,20,1,0,0,
        0,87,88,5,42,0,0,88,22,1,0,0,0,89,90,5,115,0,0,90,91,5,116,0,0,91,
        92,5,97,0,0,92,93,5,114,0,0,93,94,5,116,0,0,94,95,5,83,0,0,95,96,
        5,121,0,0,96,97,5,115,0,0,97,98,5,116,0,0,98,99,5,101,0,0,99,100,
        5,109,0,0,100,101,5,83,0,0,101,102,5,101,0,0,102,103,5,114,0,0,103,
        104,5,118,0,0,104,105,5,105,0,0,105,106,5,99,0,0,106,107,5,101,0,
        0,107,108,5,40,0,0,108,24,1,0,0,0,109,110,5,115,0,0,110,111,5,116,
        0,0,111,112,5,111,0,0,112,113,5,112,0,0,113,114,5,83,0,0,114,115,
        5,121,0,0,115,116,5,115,0,0,116,117,5,116,0,0,117,118,5,101,0,0,
        118,119,5,109,0,0,119,120,5,83,0,0,120,121,5,101,0,0,121,122,5,114,
        0,0,122,123,5,118,0,0,123,124,5,105,0,0,124,125,5,99,0,0,125,126,
        5,101,0,0,126,127,5,40,0,0,127,26,1,0,0,0,128,129,5,45,0,0,129,28,
        1,0,0,0,130,131,5,95,0,0,131,30,1,0,0,0,132,133,5,98,0,0,133,134,
        5,114,0,0,134,135,5,97,0,0,135,136,5,110,0,0,136,137,5,99,0,0,137,
        138,5,104,0,0,138,32,1,0,0,0,139,140,5,100,0,0,140,141,5,101,0,0,
        141,142,5,112,0,0,142,143,5,108,0,0,143,144,5,111,0,0,144,145,5,
        121,0,0,145,146,5,84,0,0,146,147,5,111,0,0,147,34,1,0,0,0,148,149,
        5,114,0,0,149,150,5,101,0,0,150,151,5,112,0,0,151,152,5,111,0,0,
        152,153,5,72,0,0,153,154,5,111,0,0,154,155,5,115,0,0,155,156,5,116,
        0,0,156,36,1,0,0,0,157,158,5,111,0,0,158,159,5,112,0,0,159,160,5,
        101,0,0,160,161,5,110,0,0,161,162,5,71,0,0,162,163,5,105,0,0,163,
        164,5,116,0,0,164,165,5,82,0,0,165,166,5,101,0,0,166,167,5,112,0,
        0,167,168,5,111,0,0,168,169,5,76,0,0,169,170,5,111,0,0,170,171,5,
        99,0,0,171,172,5,97,0,0,172,173,5,108,0,0,173,174,5,108,0,0,174,
        175,5,121,0,0,175,38,1,0,0,0,176,177,5,99,0,0,177,178,5,108,0,0,
        178,179,5,111,0,0,179,180,5,115,0,0,180,181,5,101,0,0,181,182,5,
        71,0,0,182,183,5,105,0,0,183,184,5,116,0,0,184,185,5,82,0,0,185,
        186,5,101,0,0,186,187,5,112,0,0,187,188,5,111,0,0,188,40,1,0,0,0,
        189,190,7,0,0,0,190,42,1,0,0,0,191,192,7,1,0,0,192,44,1,0,0,0,193,
        195,7,2,0,0,194,193,1,0,0,0,195,196,1,0,0,0,196,194,1,0,0,0,196,
        197,1,0,0,0,197,198,1,0,0,0,198,199,6,22,0,0,199,46,1,0,0,0,200,
        201,5,47,0,0,201,202,5,47,0,0,202,206,1,0,0,0,203,205,8,3,0,0,204,
        203,1,0,0,0,205,208,1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,
        209,1,0,0,0,208,206,1,0,0,0,209,210,6,23,0,0,210,48,1,0,0,0,3,0,
        196,206,1,6,0,0
    ]

class DescLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    BRANCH = 16
    DEPLOY_TO = 17
    REPO_HOST = 18
    OPEN_GIT_REPO_LOCALLY = 19
    CLOSE_GIT_REPO = 20
    NUM = 21
    CHARS = 22
    WS = 23
    LINE_COMMENT = 24

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'('", "','", "')'", "'exclude='", "'|'", "'pattern='", 
            "'from='", "'.'", "'/'", "'*'", "'startSystemService('", "'stopSystemService('", 
            "'-'", "'_'", "'branch'", "'deployTo'", "'repoHost'", "'openGitRepoLocally'", 
            "'closeGitRepo'" ]

    symbolicNames = [ "<INVALID>",
            "BRANCH", "DEPLOY_TO", "REPO_HOST", "OPEN_GIT_REPO_LOCALLY", 
            "CLOSE_GIT_REPO", "NUM", "CHARS", "WS", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "BRANCH", "DEPLOY_TO", "REPO_HOST", "OPEN_GIT_REPO_LOCALLY", 
                  "CLOSE_GIT_REPO", "NUM", "CHARS", "WS", "LINE_COMMENT" ]

    grammarFileName = "Desc.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


